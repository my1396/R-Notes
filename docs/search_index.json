[["3-rmd.html", "Chapter 3 Rmd", " Chapter 3 Rmd R Markdown is a powerful tool for combining analysis and reporting into the same document. R Markdown has grown substantially from a package that supports a few output formats, to an extensive and diverse ecosystem that supports the creation of books, blogs, scientific articles, websites, and even resumes. Nice documentations rmarkdown package CRAN Package CRAN page Reference manual bookdown package CRAN Package CRAN page Reference manual R markdown: The definitive guide. provides detailed references; GitHub repo HERE. R markdown cookbook: concise and covers essential functions, with examples. Authoring Books with R Markdown: with a focus on bookdown. Q: What is the difference between Rmd and R script? A: An R script (.R) is used for developing and troubleshooting code; a place where you can store reusable code fragments. An R Markdown file (.Rmd) is used to integrate R commands with explanatory text and output, making it useful for creating reports. Quick takeaways: Can still use horizontal separator ctrl + shift + S for dashed lines and ctrl + shift + = for equals Headers must have one empty line above and below to separate it from other text "],["3.1-yaml-metadata.html", "3.1 YAML metadata", " 3.1 YAML metadata Q: What is YAML? A: YAML is a human-friendly data serialization language for all programming languages. YAML stands for “Yet Another Markup Language.” Q: What does YAML do? A: It is placed at the very beginning of the document and is read by each of Pandoc, rmarkdown, and knitr. Provide metadata of the document. Located at the top of the file. Adheres to the YAML format and is delimited by lines containing three three dashes (---). YAML are also called header or front matter. See R Markdown YAML metadata (header) tutorial with examples by hao203 HERE for commonly used YAML metadata (header) in different R Markdown output formats. There is NO official documentation for R Markdown YAML frontmatter because the YAML frontmatter is a collection of metadata and each individual piece of data might or not be used by a piece of software from your tool chain. That is, the behavior of YAML depends on your user platform. For instance, the following metadata editor_options: chunk_output_type: console is used exclusively by RStudio to have the code block output “be shown in the R console instead of inside the source editor”. This option might be ignored by VSCode or Emacs. YAML can set values of the template variables, such as title, author, and date of the document. The output field is used by rmarkdown to apply the output format function rmarkdown::html_document() in the rendering process. There are two types of output formats in the rmarkdown package: documents (e.g., pdf_document), and presentations (e.g., beamer_presentation). Supported output format examples: html_document, pdf_document. R Markdown documents (html_documents) and R Notebook documents (html_notebook) are very similar; in fact, an R Notebook document is a special type of R Markdown document. The main difference is using R Markdown document (html_documents) you have to knit (render) the entire document each time you want to preview the document, even if you have made a minor change. However, using an R Notebook document (html_notebook) you can view a preview of the final document without rendering the entire document. Troubleshooting Issue: bookdown always output html, even if specified to pdf. Cause: If it produces HTML, the output format must have been provided somewhere. Fix: Check if you have a _output.yml under the root directory of your book project. If you do, you may delete it. Then bookdown will use the output field that you specified in the YAML frontmatter of your Rmd document. If there are two output formats, rmarkdown::render() defaults to use the first output type. If you want another, specify the type, e.g., rmarkdown::render(\"0100-RStudio.Rmd\", 'pdf_document'). bookdown wrappers of base markdown format bookdown output formats allow numbering and cross-referencing figures/tables/equations. It takes the format html_document2, in general, markdown_document2 is a wrapper for the base format markdown_document. With the bookdown output format, you can cross-reference sections by their ID’s using the same syntax when sections are numbered. Other bookdown output format examples for single documents: pdf_document2, beamer_presentation2, tufte_html2, word_document2. See Page 12 of the reference manual for a complete list of supported formats by bookdown. What bookdown is very powerful for is that it compiles books. Book formats: HTML: gitbook html_book tufte_html_book PDF: pdf_book e-book: epub_book Many aspects of the LaTeX template used to create PDF documents can be customized using top-level YAML metadata (note that these options do NOT appear underneath the output section, but rather appear at the top level along with title, author, and so on). For example: --- title: &quot;Crop Analysis Q3 2013&quot; output: pdf_document fontsize: 11pt geometry: margin=1in --- A few available metadata variables are displayed in the following (consult the Pandoc manual for the full list): Top-level YAML Variable Description lang Document language code fontsize Font size (e.g., 10pt, 11pt, or 12pt) papersize Defines the paper size (e.g., a4paper, letterpaper) documentclass LaTeX document class (e.g., article, book, and report) classoption A list of options to be passed to the document class, e.g., you can create a two-column document with the twocolumn option. geometry Options for geometry package (e.g., margin=1in set all margins to be 1 inch) mainfont, sansfont, monofont, mathfont Document fonts (works only with xelatex and lualatex) linkcolor, urlcolor, citecolor Color for internal links (cross references), external links (link to websites), and citation links (bibliography) linestretch Options for line spacing (e.g. 1, 1.5, 3). Pandoc User’s Guide: https://www.uv.es/wiki/pandoc_manual_2.7.3.wiki?21 classoption onecolumn, twocolumn - Instructs LaTeX to typeset the document in one column or two columns. twoside, oneside: Specifies whether double or single sided output should be generated. The classes’ article and report are single sided and the book class is double sided by default. Note that this option concerns the style of the document only. The option two side does NOT tell the printer you use that it should actually make a two-sided printout. The difference between single-sided and double-sided documents in LaTeX lies in the layout of the page margins and the orientation of the text on the page. Single-sided documents are printed on only one side of the page, with the text and images aligned to the right-hand side of the page. This type of layout is often used for brochures, flyers, and other types of promotional materials. Double-sided documents are printed on both sides of the page, with the text and images alternating between right-hand and left-hand margins. This type of layout is often used for books, reports, and other types of long-form documents. A twoside document has different margins and headers/footers for odd and even pages. The layout of a twoside book Q: Why Inner margin is narrow? A: The reason for this is that with two pages side by side, you actually have only THREE margins - the left, right and middle. The middle margin is made up from the inside margins of both pages, and so these are smaller because they add together to make the middle margin. If they were bigger, then you would end up with too much whitespace in the middle. o - outside margin i - inside margin b - binding offset Before binding: ------------------ ----------------- |oooo|~~~~~~|ii|b| | | |~~~~~~| | | |~~~~~~| | | | | |~~~~~~| | | |~~~~~~| | | | | |~~~~~~| | | |~~~~~~| | | | | |~~~~~~| | | |~~~~~~| | | | | |~~~~~~| | | |~~~~~~| | | | | |~~~~~~| | ------------------ ----------------- After binding: ------------------------------- |oooo|~~~~~~|ii|ii|~~~~~~|oooo| |oooo|~~~~~~|ii|ii|~~~~~~|oooo| |oooo|~~~~~~|ii|ii|~~~~~~|oooo| |oooo|~~~~~~|ii|ii|~~~~~~|oooo| |oooo|~~~~~~|ii|ii|~~~~~~|oooo| |oooo|~~~~~~|ii|ii|~~~~~~|oooo| ------------------------------- landscape - Changes the layout of the document to print in landscape mode. openright, openany - Makes chapters begin either only on right hand pages or on the next page available. This does not work with the article class, as it does not know about chapters. The report class by default starts chapters on the next page available and the book class starts them on right hand pages. In PDFs, you can use code, typesetting commands (e.g., \\vspace{12pt}), and specific packages from LaTeX. The header-includes option loads LaTeX packages. Note that header-includes is a top-level option that align with output. --- output: pdf_document header-includes: - \\usepackage{fancyhdr} --- \\pagestyle{fancy} \\fancyhead[LE,RO]{Holly Zaharchuk} \\fancyhead[LO,RE]{PSY 508} # Problem Set 12 Common header-includes: Chinese/Japanese support --- output: pdf_document header-includes: - \\usepackage{ctex} --- Alternatively, use extra_dependencies to list a character vector of LaTeX packages. This is useful if you need to load multiple packages: --- title: &quot;Untitled&quot; output: pdf_document: extra_dependencies: [&quot;bbm&quot;, &quot;threeparttable&quot;] --- If you need to specify options when loading the package, you can add a second-level to the list and provide the options as a list: --- title: &quot;Untitled&quot; output: pdf_document: extra_dependencies: caption: [&quot;labelfont={bf}&quot;] hyperref: [&quot;unicode=true&quot;, &quot;breaklinks=true&quot;] lmodern: null --- Here are some examples of LaTeX packages you could consider using within your report: pdfpages: Include full PDF pages from an external PDF document within your document. caption: Change the appearance of caption subtitles. For example, you can make the figure title italic or bold. fancyhdr: Change the style of running headers of all pages. Some output options are passed to Pandoc, such as toc, toc_depth, and number_sections. You should consult the Pandoc documentation when in doubt. --- output: pdf_document: toc: true keep_tex: true --- keep_tex: true if you want to keep intermediate TeX. Easy to debug. Defaults to false. To learn which arguments a format takes, read the format’s help page in R, e.g. ?html_document. Parameters We can include variables and R expressions in this header that can be referenced throughout our R Markdown document. For example, the following header defines start_date and end_date parameters, which will be reflected in a list called params later in the R Markdown document. --- title: My RMarkdown author: Yihui Xie output: html_document params: start_date: &#39;2020-01-01&#39; end_date: &#39;2020-06-01&#39; --- To access a parameter in our R code, call params$&lt;parameter name&gt;, e.g., params$start_date and params$end_date. Should I use quotes to surround the values? Whenever applicable use the unquoted style since it is the most readable. Use quotes when the value can be misinterpreted as a data type or the value contains a :. # values need quotes foo: &#39;{{ bar }}&#39; # need quotes to avoid interpreting as `dict` object foo: &#39;123&#39; # need quote to avoid interpreting as `int` object foo: &#39;yes&#39; # avoid interpreting as `boolean` object foo: &quot;bar:baz:bam&quot; # has colon, can be misinterpreted as key # values need not quotes foo: bar1baz234 bar: 123baz ref: R Markdown anatomy, R Markdown Cookbook https://rmarkdown.rstudio.com/lesson-6.html File options Some aspects of markdown output can be customized via global, project, or file-level options, including: How to wrap / break lines (fixed column, sentence-per-line, etc.). Where to write footnotes (below the current paragraph or section, or at the end of the document). Whether to use the visual mode markdown writer when saving markdown from source mode (to ensure consistency between documents saved from either mode). Global and project options that affect the way markdown is written can also be customized on a per-file basis. These file specific options can be set using YAML. For instance, you want to set lines wrapping after 72 characters: --- editor_options: markdown: wrap: 72 --- MathJax Options By default, MathJax scripts are included in HTML documents for rendering LaTeX and MathML equations. You can use the mathjax option to control how MathJax is included: Specify \"default\" to use an HTTPS URL from a CDN host (currently provided by RStudio). Specify \"local\" to use a local version of MathJax (which is copied into the output directory). Note that when using \"local\" you also need to set the self_contained option to false. Specify an alternate URL to load MathJax from another location. Specify null to exclude MathJax entirely. For example, to use a local copy of MathJax: --- title: &quot;Habits&quot; output: html_document: mathjax: local self_contained: false --- To use a self-hosted copy of MathJax: --- title: &quot;Habits&quot; output: html_document: mathjax: &quot;http://example.com/MathJax.js&quot; --- To exclude MathJax entirely: --- title: &quot;Habits&quot; output: html_document: mathjax: null --- 3.1.1 Render Rmd When you click the Knit button (⇧⌘K) in RStudio, generally two processes happen: The .Rmd file is fed to knitr, which executes all of the R code chunks and creates a new markdown (.md) document which includes the R code and its output. The .md file is then processed by pandoc which is responsible for creating the finished format, e.g., HTML, PDF, MS_Word. .md files can be directly converted to html, but .md to pdf is time-consuming. It first generates .tex, then call the LaTeX engine to convert to pdf. There is one function that can do the processes mentioned above: rmarkdown::render. rmarkdown::render(input, output_format = NULL, output_file = NULL, output_dir = NULL, output_options = NULL, output_yaml = NULL) Arguments Definition output_format - \"all\" will render all formats define within the file- Name of a format, e.g., html_document, will render to that single format- An output format object, e.g., html_document(toc = TRUE, toc_depth = 2, includes = includes(before_body = \"header.htm\")), where you can pass on the argument output_options - List of output options that can override the options specified in metadata (e.g could be used to force self_contained or mathjax = \"local\"). - Note that this is only valid when the output format is read from metadata (i.e. not a custom format object passed to output_format).- output_options cannot work together with xxx_document(). output_yaml Paths to YAML files specifying output formats and their configurations. The first existing one is used. If none are found, then the function searches YAML files specified to the output_yaml top-level parameter in the YAML front matter, _output.yml or _output.yaml, and then uses the first existing one. Use examples of render, using output format objects rmarkdown::render(&quot;0208-Rmd-GHpage.Rmd&quot;, bookdown::pdf_document2( latex_engine = &quot;xelatex&quot;, # template = &quot;latex/template.tex&quot;, includes = rmarkdown::includes( in_header = &quot;latex/preamble.tex&quot;, before_body = &quot;latex/before_body.tex&quot;) )) # This does NOT work as `output_options` is only valid when the format is not an output format object &quot;xxx_document()&quot; rmarkdown::render(&quot;0208-Rmd-GHpage.Rmd&quot;, bookdown::pdf_document2( latex_engine = &quot;xelatex&quot;, # template = &quot;latex/template.tex&quot;), output_options = list( includes = rmarkdown::includes( in_header = &quot;latex/preamble.tex&quot;, before_body = &quot;latex/before_body.tex&quot;) )) # render to html rmarkdown::render(&quot;0304-Quarto.Rmd&quot;, bookdown::html_document2( includes = rmarkdown::includes( in_header = &quot;head.html&quot;, before_body = &quot;scripts.html&quot;) )) Note that sometimes the bookdown cross references in Rmd are not rendered when using the Knit button. The rendered html shows Fig. \\@ref(fig:ar-res) (without the backslash). In this case, using rmarkdown::render() with output_format = bookdown::html_document2() might help. You can have more than one output formats for your Rmd. For example, you want both the html and pdf output. When you render the Rmd with rmarkdown::render(), it will use the first output format you specify in the YAML metadata (if it is missing, the default is html_document). If you do not want to use the first one, you can specify the one you want in the second argument, e.g., for an Rmd document input.Rmd with the metadata: output: html_document: toc: true pdf_document: keep_tex: true You can render it to PDF via: # Render to pdf rmarkdown::render(&#39;input.Rmd&#39;, &#39;pdf_document&#39;) # Render multiple formats render(&quot;input.Rmd&quot;, c(&quot;html_document&quot;, &quot;pdf_document&quot;)) # Render all formats defined rmarkdown::render(&#39;input.Rmd&#39;, &#39;all&#39;) RStudio calls the function rmarkdown::render() to render the document in a new R session. RStudio does this to ensure reproducibility. rmarkdown::render_site(input = \".\", output_format = \"all\",) Render all of the R Markdown documents within a directory as a website. There are two requirements for a directory to be rendered as a website: It must contain either an index.Rmd or index.md file. It must contain a site configuration file (_site.yml). Note that the “Knit” button in RStudio uses rmarkdown::render_site to knit the file in presence of an index.Rmd file in the working directory. 3.1.2 Document dependency By default, R Markdown produces standalone HTML files with no external dependencies, using data:URIs to incorporate the contents of linked scripts, stylesheets, images, and videos. This means you can share or publish the file just like you share Office documents or PDFs. If you would rather keep dependencies in external files, you can specify self_contained: false. Note that even for self-contained documents, MathJax is still loaded externally (this is necessary because of its big size). If you want to serve MathJax locally, you should specify mathjax: local and self_contained: false. One common reason to keep dependencies external is for serving R Markdown documents from a website (external dependencies can be cached separately by browsers, leading to faster page load times). In the case of serving multiple R Markdown documents you may also want to consolidate dependent library files (e.g. Bootstrap, and MathJax, etc.) into a single directory shared by multiple documents. You can use the lib_dir option to do this. For example: --- title: &quot;Habits&quot; output: html_document: self_contained: false lib_dir: libs --- Loading LaTeX packages We can load additional LaTeX packages using the extra_dependencies option within the pdf_document YAML settings. This allows us to provide a list of LaTeX packages to be loaded in the intermediate LaTeX output document, e.g., --- title: &quot;Using more LaTeX packages&quot; output: pdf_document: extra_dependencies: [&quot;bbm&quot;, &quot;threeparttable&quot;] --- If you need to specify options when loading the package, you can add a sub-level to the list and provide the options as a list, e.g., output: pdf_document: extra_dependencies: caption: [&quot;labelfont={bf}&quot;] hyperref: [&quot;unicode=true&quot;, &quot;breaklinks=true&quot;] lmodern: null For those familiar with LaTeX, this is equivalent to the following LaTeX code: \\usepackage[labelfont={bf}]{caption} \\usepackage[unicode=true, breaklinks=true]{hyperref} \\usepackage{lmodern} The advantage of using the extra_dependencies argument over the includes argument introduced in Section 6.1 is that you do not need to include an external file, so your Rmd document can be self-contained. Includes HTML Output You can do more advanced customization of output by including additional HTML content or by replacing the core Pandoc template entirely. To include content in the document header or before/after the document body, you use the includes option as follows: --- title: &quot;Habits&quot; output: html_document: includes: in_header: header.html # inject CSS and JavaScript code into the &lt;head&gt; tag before_body: doc_prefix.html # include a header that shows a banner or logo. after_body: doc_suffix.html # include a footer template: template.html # custom templates --- An example header.html to load a MathJax extension textmacros. &lt;script type=&quot;text/x-mathjax-config&quot;&gt; MathJax.Hub.Config({ loader: {load: [&#39;[tex]/textmacros&#39;]}, tex: {packages: {&#39;[+]&#39;: [&#39;textmacros&#39;]}} }); &lt;/script&gt; PDF Output For example, to support Chinese characters. You can use includes and preamble.tex (can be any name, contains any pre-loaded latex code you want to run before your main text code, for setting up environment, loading pkgs, define new commands … Very flexible.) In the main Rmd: --- output: pdf_document: includes: in_header: latex/preamble.tex before_body: latex/before_body.tex after_body: latex/after_body.tex --- If you want to add anything to the preamble, you have to use the includes option of pdf_document. This option has three sub-options: in_header: loading necessary packages before_body: Styling that has the highest priority (as it will be loaded latest; if you put in in_header, it might be overridden by default settings) Dedication page like “The books is dedicated to …” (此书献给…) An example of before_body.tex: % Styling that has the highest priority \\let\\tightlist\\relax % disable `\\tightlist` \\setlength{\\abovedisplayskip}{-5pt} \\setlength{\\abovedisplayshortskip}{-5pt} % book dedication page \\thispagestyle{empty} \\begin{center} 献给…… 呃，爱谁谁吧 \\end{center} The default bookdown uses \\tightlist for all bullet lists, setting itemsep=0pt and parskip=0pt, aim for “compact lists.” See the following definition: \\providecommand{\\tightlist}{% \\setlength{\\itemsep}{0pt}\\setlength{\\parskip}{0pt}} I personally don’t like the compact list setting, so I disable it with \\let\\tightlist\\relax. To prevent it from being overridden, I put it in before_body.tex instead of preamble.tex. after_body. Each of them takes one or multiple file paths. The file(s) specified in in_header will be added to the preamble. The files specified in before_body and after_body are added before and after the document body, respectively. \\documentclass{article} % preamble \\begin{document} % before_body % body % after_body \\end{document} In preamble.tex: \\usepackage{xeCJK} \\setCJKmainfont{Noto Sans CJK SC} Alternatively, you can use header-includes but with less flexibility to change options: --- output: pdf_document header-includes: - \\usepackage{ctex} --- Q: includes vs. header-includes, which one is better to use for loading LaTeX packages? A: Another way to add code to the preamble is to pass it directly to the header-includes field in the YAML frontmatter. The advantage of using header-includesis that you can keep everything in one R Markdown document. However, if your report is to be generated in multiple output formats, we still recommend that you use the includes method, because the header-includes field is unconditional, and will be included in non-LaTeX output documents, too. By comparison, the includes option is only applied to the pdf_document format. Ref: https://github.com/hao203/rmarkdown-YAML?tab=readme-ov-file#chinesejapanese-support https://bookdown.org/yihui/rmarkdown-cookbook/latex-preamble.html header-includes Tex style and package loading can also put in header-includes. Ex.1 --- output: pdf_document header-includes: - \\usepackage{fancyhdr} - \\pagestyle{fancy} - \\usepackage{ctex} #TeX package for Chinese - \\fancyhead[L]{MANUSCRIPT AUTHORS} - \\fancyhead[R]{MANUSCRIPT SHORT TITLE} - \\usepackage{lineno} # TeX package for line numbers - \\linenumbers --- Ex.2 --- title: Adding a Logo to LaTeX Title author: Michael Harper date: December 7th, 2018 output: pdf_document header-includes: - \\usepackage{titling} - \\pretitle{\\begin{center} \\includegraphics[width=2in,height=2in]{logo.jpg}\\LARGE\\\\} - \\posttitle{\\end{center}} --- Ex.3 To override or extend some CSS for just one document, include for example: --- output: html_document header-includes: | &lt;style&gt; blockquote { font-style: italic; } tr.even { background-color: #f0f0f0; } td, th { padding: 0.5em 2em 0.5em 0.5em; } tbody { border-bottom: none; } &lt;/style&gt; --- Change Font The default font is \\usepackage{lmodern} in bookdown. Can specify alternative fonts in preamble.tex as follows: \\usepackage{fontspec} \\setmainfont{Charter} Fonts known to LuaTeX or XeTEX may be loaded by their standard names as you’d speak them out loud, such as Times New Roman or Adobe Garamond. ‘Known to’ in this case generally means ‘exists in a standard fonts location’ such as ~/Library/Fonts on macOS, or C:\\Windows\\Fonts on Windows. In LuaTEX, fonts found in the TEXMF tree can also be loaded by name. In XeTEX, fonts found in the TEXMF tree can be loaded in Windows and Linux, but not on macOS. "],["3.2-chunk-options.html", "3.2 Chunk Options", " 3.2 Chunk Options If you want to set chunk options globally, call knitr::opts_chunk$set() in a code chunk (usually the first one in the document), e.g., ```{r, label=&quot;setup&quot;, include=FALSE} knitr::opts_chunk$set( comment = &quot;#&gt;&quot;, echo = FALSE, fig.width = 6 ) ``` Chunk options are written in the form tag=value. A special chunk option is the chunk label (e.g., setup in the above example). Only the chunk label does not need a tag (i.e., you can only provide the value). If you prefer the form tag=value, you could also use the chunk option label explicitly, e.g., label=\"setup\". The settings will apply to every chunk in your file as a default. You can overwrite them in individual chunk headers. Full list of chunk options: https://yihui.org/knitr/options/ Chunk options can customize nearly all components of code chunks, such as the source code, text output, plots, and the language of the chunk. Other languages are supported in Rmd You can list the names of all available engines via: names(knitr::knit_engines$get()) ## [1] &quot;awk&quot; &quot;bash&quot; &quot;coffee&quot; ## [4] &quot;gawk&quot; &quot;groovy&quot; &quot;haskell&quot; ## [7] &quot;lein&quot; &quot;mysql&quot; &quot;node&quot; ## [10] &quot;octave&quot; &quot;perl&quot; &quot;php&quot; ## [13] &quot;psql&quot; &quot;Rscript&quot; &quot;ruby&quot; ## [16] &quot;sas&quot; &quot;scala&quot; &quot;sed&quot; ## [19] &quot;sh&quot; &quot;stata&quot; &quot;zsh&quot; ## [22] &quot;asis&quot; &quot;asy&quot; &quot;block&quot; ## [25] &quot;block2&quot; &quot;bslib&quot; &quot;c&quot; ## [28] &quot;cat&quot; &quot;cc&quot; &quot;comment&quot; ## [31] &quot;css&quot; &quot;ditaa&quot; &quot;dot&quot; ## [34] &quot;embed&quot; &quot;eviews&quot; &quot;exec&quot; ## [37] &quot;fortran&quot; &quot;fortran95&quot; &quot;go&quot; ## [40] &quot;highlight&quot; &quot;js&quot; &quot;julia&quot; ## [43] &quot;python&quot; &quot;R&quot; &quot;Rcpp&quot; ## [46] &quot;sass&quot; &quot;scss&quot; &quot;sql&quot; ## [49] &quot;stan&quot; &quot;targets&quot; &quot;tikz&quot; ## [52] &quot;verbatim&quot; &quot;theorem&quot; &quot;lemma&quot; ## [55] &quot;corollary&quot; &quot;proposition&quot; &quot;conjecture&quot; ## [58] &quot;definition&quot; &quot;example&quot; &quot;exercise&quot; ## [61] &quot;hypothesis&quot; &quot;proof&quot; &quot;remark&quot; ## [64] &quot;solution&quot; &quot;marginfigure&quot; The engines from theorem to solution are only available when you use the bookdown package, and the rest are shipped with the knitr package. To use a different language engine, you can change the language name in the chunk header from r to the engine name, e.g., ```python x = &#39;hello, python world!&#39; print(x.split(&#39; &#39;)) ``` For engines that rely on external interpreters such as python, perl, and ruby, the default interpreters are obtained from Sys.which(), i.e., using the interpreter found via the environment variable PATH of the system. If you want to use an alternative interpreter, you may specify its path in the chunk option engine.path. For example, you may want to use Python 3 instead of the default Python 2, and we assume Python 3 is at /usr/bin/python3 ```{python, engine.path = &#39;/usr/bin/python3&#39;} import sys print(sys.version) ``` All outputs support markdown syntax. If the output is html, you can write in html syntax. The chunk label for each chunk is assumed to be unique within the document. This is especially important for cache and plot filenames, because these filenames are based on chunk labels. Chunks without labels will be assigned labels like unnamed-chunk-i, where i is an incremental number. Chunk label doesn’t need a tag, i.e., you only provide the value. If you prefer the form tag=value, you could also use the chunk option label explicitly, e.g., ```{r, label=&#39;my-chunk&#39;} # one code chunk example ``` You may use knitr::opts_chunk$set() to change the default values of chunk options in a document. Commonly used chunk options Complete list here. Or ?opts_chunk to get the help page. Options Definitions echo=TRUE Whether to display the source code in the output document.Use this when you want to show the output but NOT the source code itself. eval=TRUE Whether to evaluate the code chunk. include=TRUE Whether to include the chunk code and output in the output document—including source code, text output, messages, warnings, and plots. If FALSE, nothing will be written into the output document, but the code is still evaluated and plot files are generated if there are any plots in the chunk, so you can manually insert figures later. message=TRUE Whether to preserve messages emitted by message() warning=TRUE Whether to show warnings in the output produced by warning(). results='markup' Controls how to display the text results. When results='markup' that is to write text output as-is, i.e., write the raw text results directly into the output document without any markups.Useful when priting stargazer tables. comment='##' The prefix to be added before each line of the text output. Set comment = '' remove the default ##. collapse=FALSE Whether to, if possible, collapse all the source and output blocks from one code chunk into a single block (by default, they are written to separate blocks). This option only applies to Markdown documents. fig.keep='high' How plots in chunks should be kept. high: Only keep high-level plots (merge low-level changes into high-level plots). none: Discard all plots. all: Keep all plots (low-level plot changes may produce new plots). first: Only keep the first plot. last: Only keep the last plot. If set to a numeric vector, the values are indices of (low-level) plots to keep.If you want to choose the second to the fourth plots, you could use fig.keep = 2:4 (or remove the first plot via fig.keep = -1). fig.align=\"center\" Figure alignment. fig.pos=\"H\" A character string for the figure position arrangement to be used in \\begin{figure}[]. fig.cap Figure caption. results='markup' note plural form for results. results='markup': Default. Mark up text output with the appropriate environments depending on the output format. For example, for R Markdown, if the text output is a character string \"[1] 1 2 3\", the actual output that knitr produces will be: ``` [1] 1 2 3 ``` In this case, results='markup' means to put the text output in fenced code blocks (```). results='asus': Write text output as-is, i.e., write the raw text results directly into the output document without any markups. ```{r, results=&#39;asis&#39;} cat(&quot;I&#39;m raw **Markdown** content.\\n&quot;) ``` Sometime, you encounter the following error messages when you have R codes within enumerate environment. You can’t use macro parameter character # in horizontal mode. By default, knitr prefixes R output with ##, which can’t be present in your TeX file. Solution: specify results=\"asis\" in code chunks. results='hold': Hold all pieces of text output in a chunk and flush them to the end of the chunk. results='hide' (or results='FALSE'): Hide text output. collapse = FALSE Whether to merge text output and source code into a single code block in the output. The default FALSE means R expressions and their text output are separated into different blocks. collapse = TRUE makes the output more compact, since the R source code and its text output are displayed in a single output block. The default collapse = FALSE means R expressions and their text output are separated into different blocks. Hooks The object knit_hooks in the knitr package is used to set hooks; the basic usage is knitr::knit_hooks$set(name = FUN) (see objects for details) where name is the name of a chunk option (can be arbitrary), and FUN is a function. There are two types of hooks: chunk hooks and A chunk hook is a function that is triggered by a chunk option when the value of this chunk option is not NULL. output hooks Output hooks control over output from your code chunks, such as source code, text output, messages, and plots. Hook functions may have different forms, depending what they are designed to do. Chunk hooks For example, we define a custom chunk hook function for the small_mar option knitr::knit_hooks$set(small_mar = function(before, ...) { if (before) par(mar = c(4, 4, .1, .1)) # smaller top/right margin }) Then this function will be called for a chunk option like the following (small_mar doesn’t have to be TRUE; it can be any non-NULL value): ```{r, myplot, small_mar=TRUE} hist(rnorm(100), main = &#39;&#39;) ``` Output hooks With the knitr package, you have control over every piece of output from your code chunks, such as source code, text output, messages, and plots. The control is achieved through “output hooks.” Available output hook names: names(knitr:::.default.hooks) ## [1] &quot;source&quot; &quot;output&quot; &quot;warning&quot; &quot;message&quot; ## [5] &quot;error&quot; &quot;plot&quot; &quot;inline&quot; &quot;chunk&quot; ## [9] &quot;text&quot; &quot;evaluate.inline&quot; &quot;evaluate&quot; &quot;document&quot; Note that these names of output hooks are reserved by knitr, so you must NOT use these names for your custom chunk hooks. source: processing the source code. output: processing text output. You may obtain the actual hooks from the object knit_hooks via the get() method, e.g., # for meaningful output, the code below should be # executed *inside* a code chunk of a knitr document knitr::knit_hooks$get(&quot;source&quot;) knitr::knit_hooks$get(&quot;output&quot;) # or knitr::knit_hooks$get(c(&#39;source&#39;, &#39;output&#39;)) A custom output hook is registered through the set() method of knit_hooks. Because this method will override the existing default hook, we recommend that you save a copy of an existing hook, process the output elements in your own way, and pass the results to the default hook. When the text output from a code chunk is lengthy, you may want to only show the first few lines. For example, when printing a data frame of a few thousand rows, it may not be helpful to show the full data, and the first few lines may be enough. Below we redefine the output hook so that we can control the maximum number of lines via a custom chunk option out.lines: # save the built-in output hook hook_output &lt;- knitr::knit_hooks$get(&quot;output&quot;) # set a new output hook to truncate text output knitr::knit_hooks$set(output = function(x, options) { if (!is.null(n &lt;- options$out.lines)) { x &lt;- xfun::split_lines(x) if (length(x) &gt; n) { # truncate the output x &lt;- c(head(x, n), &quot;....\\n&quot;) } x &lt;- paste(x, collapse = &quot;\\n&quot;) } hook_output(x, options) }) The basic idea of the above hook function is that if the number of lines of the text output is greater than the threshold set in the chunk option out.lines (stored in the variable n in the function body), we only keep the first n lines and add an ellipsis (....) to indicate the output is truncated. Now we can test the new output hook by setting the chunk option out.lines = 4 on the chunk below: ```{r out.lines = 4} print(cars) ``` ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 .... And you see four lines of output as expected. print(head(cars, 10)) ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 ## 4 7 22 ## 5 8 16 ## 6 9 10 ## 7 10 18 ## 8 10 26 ## 9 10 34 ## 10 11 17 Since we have stored the original output hook in hook_output, we can restore it by calling the set() method again: knitr::knit_hooks$set(output = hook_output) Now we print the data frame again. The default behavior is to print the whole data frame. print(head(cars, 10)) ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 ## 4 7 22 ## 5 8 16 ## 6 9 10 ## 7 10 18 ## 8 10 26 ## 9 10 34 ## 10 11 17 References: Output hooks: https://bookdown.org/yihui/rmarkdown-cookbook/output-hooks.html Chunk hooks: https://bookdown.org/yihui/rmarkdown-cookbook/chunk-hooks.html "],["3.3-print-verbatim-r-code-chunks.html", "3.3 Print Verbatim R code chunks", " 3.3 Print Verbatim R code chunks verbatim in line code use knitr::inline_expr. --- title: &quot;Test inline expr&quot; output: html_document --- To use `chunk_reveal(&quot;walrus&quot;, title = &quot;## Walrus operator&quot;)` inline, you can wrap it in R inline chunk like this `` `r chunk_reveal(&quot;walrus&quot;, title = &quot;## Walrus operator&quot;)` `` Including verbatim R code chunks inside R Markdown One solution for including verbatim R code chunks (see below for more) is to insert hidden inline R code (`r ''`) immediately before or after your R code chunk. The hidden inline R code will be evaluated as an inline expression to an empty string by knitr. Then wrap the whole block within a markdown code block. The rendered output will display the verbatim R code chunk — including backticks. R code generating the four backticks block: output_code &lt;- &quot;````markdown ```{r} plot(cars) ``` \\n````&quot; cat(output_code) Write this code in your R Markdown document: output_code &lt;- &quot;````markdown `r &#39;&#39;````{r} plot(cars) ``` \\n````&quot; cat(output_code) ````markdown `r &#39;&#39;````{r} plot(cars) ``` ```` or output_code &lt;- &quot;````markdown ```{r}`r &#39;&#39;` plot(cars) ``` \\n````&quot; cat(output_code) ````markdown ```{r}`r &#39;&#39;` plot(cars) ``` ```` Knit the document and the code will render like this in your output: ```{r} plot(cars) ``` This method makes use of Markdown Syntax for code. Q: What is the Markdown Syntax for code? A: Inline code use a pair of backticks, e.g., `code`. To use \\(n\\) literal backticks, use at least \\(n+1\\) backticks outside. Note that use a space to separate your outside backticks from your literal backtick(s). For example, to generate `code`, you use ``␣`code`␣`` (i.e., two backticks + space + one backtick + code + one backtick + space + two backticks). Note that you need to write sequentially. Plain code blocks can be written either After three or more backticks (fenced code blocks), or Can also use tildes (~) Indent the blocks by four spaces (indented code blocks) Special characters do not trigger special formatting, and all spaces and line breaks are preserved. Blank lines in the verbatim text need not begin with four spaces. Note that code blocks must be separated from surrounding text by blank lines. If the code itself contains a row of tildes or backticks, just use a longer row of tildes or backticks at the start and end: ~~~~~~~~~~~~~~~~ ~~~~~~~~~~ code including tildes ~~~~~~~~~~ ~~~~~~~~~~~~~~~~ These begin with a row of three or more tildes (~) and end with a row of tildes that must be at least as long as the starting row. A trick if you don’t want to type more than three tildes or backticks is that you just use different inner and outer symbols. ~~~markdown ```r print (&quot;hello world&quot;) ``` ~~~ Will be rendered as: ```r print (&quot;hello world&quot;) ``` A shortcut form (without braces) can also be used for specifying the language of the code block: ```haskell qsort [] = [] ``` This is equivalent to: ``` {.haskell} qsort [] = [] ``` haskell is the language class. You can add more classes, such as numberLines for adding line numbers. This shortcut form may be combined with attributes: ```haskell {.numberLines} qsort [] = [] ``` Which is equivalent to: ``` {.haskell .numberLines} qsort [] = [] ``` and &lt;pre id=&quot;mycode&quot; class=&quot;haskell numberLines&quot; startFrom=&quot;100&quot;&gt; &lt;code&gt; primes = filterPrime [2..] where filterPrime (p:xs) = p : filterPrime [x | x &lt;- xs, x `mod` p /= 0] &lt;/code&gt; &lt;/pre&gt; If highlighting is supported for your output format and language, then the code block above will appear highlighted, with numbered lines starting with 100, 101, and go on. primes = filterPrime [2..] where filterPrime (p:xs) = p : filterPrime [x | x Code chunks within enumerate Mind the indentation. Rstudio does not automatically adjust indentation for codes. specify results=\"asis\" if encounter You can’t use `macro parameter character #’ in horizontal mode. cross references using bookdown (\\@ref{fig:scatter-plot}) might not work. Use latex references \\ref{fig:scatter-plot} (base latex) or \\autoref{fig:scatter-plot} (from hyperref package) markdown language does not work well inside latex environments. A possible workaround is use 1 and indent four spaces for contents that follow. If it is still a pain in the ass, use this solution. Basically, just copy the output from R condole and paste in Rmd. References: https://yihui.org/en/2017/11/knitr-verbatim-code-chunk/ https://support.posit.co/hc/en-us/articles/360018181633-Including-verbatim-R-code-chunks-inside-R-Markdown https://themockup.blog/posts/2021-08-27-displaying-verbatim-code-chunks-in-xaringan-presentations/ Pandoc’s Markdown: https://pandoc.org/MANUAL.html#fenced-code-blocks "]]
